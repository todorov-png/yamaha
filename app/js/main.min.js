'use strict';

const header = document.querySelector(".header"),
      burgerMenu = header.querySelector(".menu-burger__header"),
      headerNav = header.querySelector(".header__nav"),
      headerItem = header.querySelectorAll(".header__item");

if (header !== null) {
  headerRendering();

  //При изменении ширины окна перерисовываем шапку
  window.addEventListener('resize', function(event){
    headerRendering();
  });
  
  burgerMenu.onclick = () => {
    burgerMenu.classList.toggle("open-menu");
    headerNav.classList.toggle("open-menu");
  };
}

//Меняем кнопки в шапке если есть авторизация пользователя
const userData = JSON.parse(localStorage.getItem('data_user'));

if(userData !== null) {
  updataUserData();
} else {
  //Скрываем корзину до авторизации
  const basketLink = header.querySelector(".header__item-basket");

  if(basketLink !== null) {
    basketLink.style.display="none";
  }
}

//При обновлении данных в localStorage обновляем шапки сайта
window.addEventListener('storage', () => {
  updataUserData();
  createTableBasket();
});

//Выравниваем эмблему по центру
function headerRendering() {
  if (header.offsetWidth > 960) {
    headerItem[0].style.width = headerItem[2].offsetWidth + 'px';
  } else {
    headerItem[0].style.width = 'auto';
  }
  headerNav.style.top = header.offsetHeight + 'px';
}

//Функция обновления данных если пользователь авторизовался
function updataUserData() {
  const accountLoginLink = header.querySelectorAll(".account-login"),
        registrationLink = header.querySelectorAll(".registration"),
        basketLink = header.querySelector(".header__item-basket");

  //Скрываем все кнопки входа
  if(accountLoginLink !== null) {
    accountLoginLink.forEach((elem)=>{
      elem.style.display="none";
    });
  }

  //Изменяем все кнопки регистрации на Мой аккаунт
  if(registrationLink !== null) {
    registrationLink.forEach((elem)=>{
      elem.textContent ="Мой аккаунт";
      elem.setAttribute("href", 'http://yamahashop.zzz.com.ua/page/my_account.html');
    });
  }

  //Проверяем есть ли что в корзине и обновляем счетчик
  const basketData = JSON.parse(localStorage.getItem('data_basket')),
        counterBasketText = document.querySelector(".counter-basket-text");
  if(basketData !== null && counterBasketText !== null) {
    //Считаем товары и изменяем счетчик корзины
    let i = 0;
    basketData.forEach(() => {
      i++;
    });
    counterBasketText.textContent = i;  
  }
}


function goToBasket() {
  const basketData = JSON.parse(localStorage.getItem('data_basket')),
        basketLink = document.querySelector(".header__item-basket");
  if(basketData !== null) {
    let i = 0;
    basketData.forEach(() => {
      i++;
    });
    if(i>0) {
      document.location.href = "http://yamahashop.zzz.com.ua/page/basket.html";
      basketLink.setAttribute("href", 'http://yamahashop.zzz.com.ua/page/basket.html');
    }
  } else {
    callPopUp('Ваша корзина пуста!');
  }
}
'use strict';

//Плавное исчезновение уведомления
function callPopUp(text) {
  const divPopUp = document.createElement( "div" ),
      blockText = document.createElement( "p" ),
      body = document.querySelector('body'),
      oldDivPopUp = document.querySelector('.pop-up-notification');

  if (oldDivPopUp !== null) {
    oldDivPopUp.remove();
  }
  
  divPopUp.classList.add('pop-up-notification');
  blockText.classList.add('pop-up-notification__text');
  blockText.textContent = text;
  blockText.zIndex = 100000;
  divPopUp.append(blockText);
  body.insertAdjacentElement('afterBegin', divPopUp);
  smoothTransparencyChange(divPopUp, 1500, 50);
}

function smoothTransparencyChange(block, timeStart, timeInterval) {
  let op = 1;
  setTimeout(()=>{
    setTimeout(function func() {
      if (op < 0) {
        block.remove();
        return;
      }
      block.style.opacity = op;
      op -= 0.05;
      setTimeout (func, timeInterval);
    }, timeInterval); 
  }, timeStart);
}
'use strict';

//Появление формы при наведении на блок "Поиграть на инструменте"
const tool = document.querySelectorAll(".tool-description__row"),
      hoverBtnTesting = document.querySelector(".registration-for-testing__text"),
      formTesting = document.querySelector(".registration-for-testing__form-wrapper");

function showFormTests() {
  formTesting.style.display = "flex";
	formTesting.style.opacity = 1;
	if (tool[2].offsetWidth > 480) {
		formTesting.style.height = tool[2].offsetHeight + 1 + 'px';
	} else {
		formTesting.style.height = tool[1].offsetHeight + tool[2].offsetHeight + 1 + 'px';
	}
}

if (hoverBtnTesting !== null) {
	hoverBtnTesting.addEventListener('mouseover', showFormTests);
	hoverBtnTesting.addEventListener('touchstart', showFormTests);
	window.addEventListener('resize', showFormTests);
	//hoverBtnTesting.addEventListener('touchenter', showFormTests);
}


//Получение данных с формы регистрации без перезагрузки JS formData
document.addEventListener('DOMContentLoaded', function(){
  const form = document.querySelector(".registration-for-testing__form");
	if (form !== null) {
		form.addEventListener('submit', (e)=> {
			const request = new XMLHttpRequest(),
						formData = new FormData(form);
			e.preventDefault();
			callPopUp('Записываю вашу заявку, подождите!');
			request.open('POST', '../php/mail.php');
			request.send(formData);
			request.addEventListener('load', () => {
				if (request.status === 200) {
					callPopUp('Ваша заявка принята, ожидайте звонка!');
					form.reset();
					let op = 1;
					setTimeout(()=>{
						setTimeout(function func() {
							if (op < 0) {
								formTesting.style.display = 'none';
								return;
							}
							formTesting.style.opacity = op;
							op -= 0.05;
							setTimeout (func, 50);
						}, 50); 
					}, 1000);
				} else {
					callPopUp('Произошла ошибка, попробуйте еще!');
				}
			});
		});
	}
});
'use strict';

//Получение данных с формы регистрации без перезагрузки JS formData
document.addEventListener('DOMContentLoaded', function(){
  const form = document.querySelector(".form-reg-speed__form");
  if (form !== null) {
    form.addEventListener('submit', (e)=> {
      e.preventDefault();
      const request = new XMLHttpRequest(),
            formData = new FormData(form);
      callPopUp('Проверяю данные, подождите!');
      request.open('POST', '../php/registration_form.php');
      request.send(formData);
      request.addEventListener('load', () => {
        if (request.status === 200) {
          if (JSON.parse(request.response)) {
            callPopUp('Регистрация прошла успешно!');
            form.reset();
            localStorage.setItem('data_user', request.response);
            setTimeout(function() {
              document.location.href = "http://yamahashop.zzz.com.ua/";
            }, 1000);
          } else {
            callPopUp('Пользователь с таким email уже зарегистрирован, перейдите на страницу входа!');
          }
        } else {
          callPopUp('Произошла ошибка, попробуйте еще!');
        }
      });
    });
  }
});
'use strict';
//Получение данных с формы регистрации без перезагрузки JS formData
document.addEventListener('DOMContentLoaded', function(){
  const form = document.querySelector(".form-authorization__form");
  if (form !== null) {
    form.addEventListener('submit', (e)=> {
      e.preventDefault();
      const request = new XMLHttpRequest(),
            formData = new FormData(form);
      callPopUp('Проверяю данные, подождите!');
      request.open('POST', '../php/account_form.php');
      request.send(formData);
      request.addEventListener('load', () => {
        if (request.status === 200) {
          const answer = JSON.parse(request.response);
          if (answer) {
            if (answer.password_status) {
              callPopUp('Авторизация прошла успешно!');
              form.reset();
              localStorage.setItem('data_user', request.response);
              setTimeout(function() {
                document.location.href = "http://yamahashop.zzz.com.ua/";
              }, 1000); 
            } else {
              callPopUp('Введён неверный пароль!');
            }
          } else {
            callPopUp('Пользователь с таким email не найден!');
          }
        } else {
          callPopUp('Произошла ошибка, попробуйте еще!');
        }
      });
    });
  }
});
'use strict';

//Появление надписи при наведении на блок с инструментом
const instruments = document.querySelectorAll(".instruments-item");

if(instruments !== null) {
  instruments.forEach((elem)=>{
    //Появление надписи купить на блоке при наведении
    elem.addEventListener('mouseover', ()=> {
      elem.querySelector(".instruments-item__hover-text").style.display="block";
    });

    //Убираем надпись купить, если курсор ушел с блока
    elem.addEventListener('mouseout', ()=> {
      elem.querySelector(".instruments-item__hover-text").style.display="none";
    });

    //Добавляем товар в корзину, если кликнули
    elem.addEventListener('click', ()=> {
      const user = JSON.parse(localStorage.getItem('data_user')),
            counterBasketText = document.querySelector(".counter-basket-text");

      if(user !== null) {
        let basket = JSON.parse(localStorage.getItem('data_basket')),
            attribute = elem.getAttribute("data-id");

        const price = parseInt(elem.querySelector("p").textContent);

        if(basket === null) {
          //Если корзина пуста, то сохраняем данные
          basket = [{
              id: attribute,
              name: elem.querySelector("h4").textContent,
              price: price,
              counter: 1,
              sum: price
          }];
          localStorage.setItem('data_basket', JSON.stringify(basket));
          counterBasketText.textContent = parseInt(counterBasketText.textContent) + 1;
          callPopUp('Товар добавлен в корзину!');
        } else {
          let i = 0;
          basket.forEach(obj => {
            if(obj.id === attribute) {
              i++;
            }
          });
          
          if(i === 0) {
            basket.push({
              id: attribute,
              name: elem.querySelector("h4").textContent,
              price: price,
              counter: 1,
              sum: price
            });
            localStorage.setItem('data_basket', JSON.stringify(basket));
            counterBasketText.textContent = parseInt(counterBasketText.textContent) + 1;
            callPopUp('Товар добавлен в корзину!');
          } else {
            callPopUp('Вы уже добавили этот товар в корзину!');
          }
        }
      } else {
        callPopUp('Для добавления в корзину необходимо авторизоваться!');
      }
    });
  });
}


//При изменении ширины окна работаем с блоками
/*window.addEventListener('resize', function(event){
  instruments.forEach((elem)=>{
    elem.addEventListener('mouseover', ()=> {
      elem.querySelector(".instruments-item__hover-text").style.display="block";
    });

    elem.addEventListener('mouseout', ()=> {
      elem.querySelector(".instruments-item__hover-text").style.display="none";
    });
    /* elem.addEventListener('touchstart', ()=> {
      elem.querySelector(".instruments-item__hover-text").style.display="block";
    }); 
  
    /* elem.addEventListener('touchend', ()=> {
      elem.querySelector(".instruments-item__hover-text").style.display="none";
    }); 
  
    /* elem.addEventListener('mousedown', ()=> {
      alert('нажали купить');
    }); 
  });
});*/

'use strict';

createTableBasket();

function deleteProduct(idRow) {
  const table = document.querySelector(".table-product"),
        row = table.querySelector(`[data-id="${idRow}"]`),
        basket = JSON.parse(localStorage.getItem('data_basket'));

  row.remove();
  if(basket.length !== 1) {
    const filteredBasket = basket.filter((item) => item.id !== idRow);
    console.log(filteredBasket);
    costBasket(filteredBasket);
    localStorage.setItem('data_basket', JSON.stringify(filteredBasket));
  } else {
    //Если удалены все позиции, то изменяем заголовок и удаляем таблицу и форму
    clearBasket();
  }
}


function plusProductCounter(idRow) {
  const table = document.querySelector(".table-product"),
        basket = JSON.parse(localStorage.getItem('data_basket')),
        row = table.querySelector(`[data-id="${idRow}"]`),
        price = row.querySelector(".table-product__row-price"),
        amount = row.querySelector(".table-product__row-amount").querySelector("span"),
        sum = row.querySelector(".table-product__row-sum"),
        priceValue = parseInt(price.innerText);
      
  let amountValue = parseInt(amount.innerText);

  amountValue++;
  if(amountValue > 19) {
    amountValue = 20;
    callPopUp('Максимальное количество товара 20!');
  }
  amount.innerText = String(amountValue);
  sum.innerText = String(amountValue * priceValue);

  basket.forEach(product => {
    if(product.id === idRow) {
      product.counter = amountValue;
      product.sum = amountValue*priceValue;
    }
  });

  costBasket(basket);
  localStorage.setItem('data_basket', JSON.stringify(basket));
}


function minusProductCounter(idRow) {
  const table = document.querySelector(".table-product"),
        basket = JSON.parse(localStorage.getItem('data_basket')),
        row = table.querySelector(`[data-id="${idRow}"]`),
        price = row.querySelector(".table-product__row-price"),
        amount = row.querySelector(".table-product__row-amount").querySelector("span"),
        sum = row.querySelector(".table-product__row-sum"),
        priceValue = parseInt(price.innerText);
      
  let amountValue = parseInt(amount.innerText);

  amountValue--;
  if(amountValue < 1) {
    amountValue = 1;
    callPopUp('Минимальное количество товара 1!');
  }
  amount.innerText = String(amountValue);
  sum.innerText = String(amountValue * priceValue);

  basket.forEach(product => {
    if(product.id === idRow) {
      product.counter = amountValue;
      product.sum = amountValue*priceValue;
    }
  });

  costBasket(basket);
  localStorage.setItem('data_basket', JSON.stringify(basket));
}


function createTableBasket() {
  const basketBlock = document.querySelector(".basket"),
        basketData = JSON.parse(localStorage.getItem('data_basket'));
        

  if(basketBlock !== null && basketData !== null && basketData.length > 0) {

    let table = document.querySelector(".table-product"),
        form = document.querySelector(".form-product"),
        tableTextHTML = ` <tr class="table-product__row">
                            <th>Товар</th>
                            <th>Цена</th>
                            <th>Количество</th>
                            <th>Сумма</th>
                          </tr>`,
        formTextHTML = `<p class="form-product__text">
                          Сумма заказа: 
                          <span class="form-product__sum"></span>&nbsp;грн.
                        </p>
                        <button>Заказать</button>`;

    basketData.forEach((product) => {
      tableTextHTML += ` <tr class="table-product__row" data-id="${product.id}">
                      <td class="table-product__row-name">${product.name}</td>
                      <td class="table-product__row-price">${product.price}</td>
                      <td class="table-product__row-amount-wraper">
                        <div class="table-product__row-amount">
                          <a href="javascript:void(0);" onclick="minusProductCounter('${product.id}');"><i class="far fa-minus-square"></i></a>
                          <span>${product.counter}</span>
                          <a href="javascript:void(0);" onclick="plusProductCounter('${product.id}');"><i class="far fa-plus-square"></i></a>
                        </div>
                        </td>
                      <td class="table-product__row-sum">${product.sum}</td>
                      <td class="table-product__row-close">
                        <a href="javascript:void(0);" onclick="deleteProduct('${product.id}');"><i class="fas fa-times"></i></a>
                      </td>
                    </tr>`;
    });

    if (table === null) {
      table = document.createElement("table");
    }
    if(form === null) {
      form = document.createElement("form");
    }

    table.classList.add('table-product');
    form.classList.add('form-product');
    table.innerHTML = tableTextHTML;
    form.innerHTML = formTextHTML;
    basketBlock.append(table);
    basketBlock.append(form);
    document.querySelector(".basket__heading-text").innerText = 'Корзина';
    costBasket(basketData);
  } else if(document.querySelector(".basket__heading-text") !== null){
    document.querySelector(".basket__heading-text").innerText = 'Корзина пуста';
  }
}


function costBasket(data) {
  const sumBlock = document.querySelector(".form-product__sum");
  let sum = 0;

  data.forEach(product => {
    sum += product.sum;
  });

  if(sumBlock !== null) {
    sumBlock.innerText = String(sum);
  }
}

function clearBasket() {
  const table = document.querySelector(".table-product"),
        form = document.querySelector(".form-product");

  if (form !== null && table !== null) {
    table.remove();
    form.remove();
    localStorage.removeItem('data_basket');
    document.querySelector(".basket__heading-text").innerText = 'Корзина пуста';
    callPopUp('Корзина пуста!');
  }
}


//Получение данных с формы регистрации без перезагрузки JS JSON
document.addEventListener('DOMContentLoaded', function(){
  const form = document.querySelector(".form-product");
  if (form !== null) {
    form.addEventListener('submit', (e)=> {
      e.preventDefault();

      let data = {},
          tools = `[`;

      const basketData = JSON.parse(localStorage.getItem('data_basket')),
            userData = JSON.parse(localStorage.getItem('data_user')),
            request = new XMLHttpRequest();

      if(userData !== null && basketData !== null) {

        basketData.forEach((product) => {
          tools += `{"id":"${product.id}","name":"${product.name}","price":"${product.price}","counter":"${product.counter}"},`;
        });

        tools = tools.substring(0, tools.length-1)+']';
        data.email = userData.email;
        data.tools = JSON.parse(tools);
      }

      request.open('POST', '../php/basket.php');
      request.setRequestHeader('Content-type', 'application/json; charset=utf-8');
      request.send(JSON.stringify(data));
      request.addEventListener('load', () => {
        if (request.status === 200) {
          clearBasket();
          callPopUp('Заказ принят, ожидайте, мы с вами свяжемся!');
        } else {
          callPopUp('Произошла ошибка, попробуйте еще!');
        }
      });
    });
  }
});